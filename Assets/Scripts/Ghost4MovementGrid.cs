public class Ghost4MovementGrid
{
    private readonly char[,] _rawMovementMapNew =
    {
        { 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
        { 'X', '→', '→', '→', '→', '→', '→', '→', '→', '→', '→', '→', '↓', 'X', 'X', '→', '→', '→', '→', '→', '→', '→', '→', '→', '→', '→', '↓', 'X' },
        { 'X', '↑', 'X', 'X', 'X', 'X', '↑', 'X', 'X', 'X', 'X', 'X', '↓', 'X', 'X', '↑', 'X', 'X', 'X', 'X', 'X', '↑', 'X', 'X', 'X', 'X', '↓', 'X' },
        { 'X', '↑', 'X', 'X', 'X', 'X', '↑', 'X', 'X', 'X', 'X', 'X', '↓', 'X', 'X', '↑', 'X', 'X', 'X', 'X', 'X', '↑', 'X', 'X', 'X', 'X', '↓', 'X' },
        { 'X', '↑', 'X', 'X', 'X', 'X', '↑', 'X', 'X', 'X', 'X', 'X', '↓', 'X', 'X', '↑', 'X', 'X', 'X', 'X', 'X', '↑', 'X', 'X', 'X', 'X', '↓', 'X' },
        { 'X', '↑', '←', '←', '←', '←', '↑', '←', '←', '←', '→', '→', '→', '→', '→', '↑', '←', '←', '→', '→', '→', '↑', '→', '→', '→', '→', '↓', 'X' },
        { 'X', '↑', 'X', 'X', 'X', 'X', '↓', 'X', 'X', '↑', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '↑', 'X', 'X', '↓', 'X', 'X', 'X', 'X', '↓', 'X' },
        { 'X', '↑', 'X', 'X', 'X', 'X', '↓', 'X', 'X', '↑', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '↑', 'X', 'X', '↓', 'X', 'X', 'X', 'X', '↓', 'X' },
        { 'X', '↑', '←', '←', '←', '←', '←', 'X', 'X', '↑', '←', '←', '←', 'X', 'X', '→', '→', '→', '↑', 'X', 'X', '↓', '←', '←', '←', '←', '←', 'X' },
        { 'X', 'X', 'X', 'X', 'X', 'X', '↑', 'X', 'X', 'X', 'X', 'X', '↑', 'X', 'X', '↑', 'X', 'X', 'X', 'X', 'X', '↓', 'X', 'X', 'X', 'X', 'X', 'X' },
        { ' ', ' ', ' ', ' ', ' ', 'X', '↑', 'X', 'X', 'X', 'X', 'X', '↑', 'X', 'X', '↑', 'X', 'X', 'X', 'X', 'X', '↓', 'X', ' ', ' ', ' ', ' ', ' ' },
        { ' ', ' ', ' ', ' ', ' ', 'X', '↑', 'X', 'X', '↓', '←', '←', '↑', '←', '→', '↑', '→', '→', '↓', 'X', 'X', '↓', 'X', ' ', ' ', ' ', ' ', ' ' },
        { ' ', ' ', ' ', ' ', ' ', 'X', '↑', 'X', 'X', '↓', 'X', 'X', 'X', '↑', '↑', 'X', 'X', 'X', '↓', 'X', 'X', '↓', 'X', ' ', ' ', ' ', ' ', ' ' },
        { 'X', 'X', 'X', 'X', 'X', 'X', '↑', 'X', 'X', '↓', 'X', '→', '→', '↑', '↑', '←', '←', 'X', '↓', 'X', 'X', '↓', 'X', 'X', 'X', 'X', 'X', 'X' },
        { '→', '←', '←', '←', '←', '←', '←', '←', '←', '←', 'X', '→', '→', '↑', '↑', '←', '←', 'X', '→', '→', '→', '→', '→', '→', '→', '→', '→', '←' },
        { 'X', 'X', 'X', 'X', 'X', 'X', '↑', 'X', 'X', '↑', 'X', '→', '→', '↓', '↓', '←', '←', 'X', '↑', 'X', 'X', '↓', 'X', 'X', 'X', 'X', 'X', 'X' },
        { ' ', ' ', ' ', ' ', ' ', 'X', '↑', 'X', 'X', '↑', 'X', 'x', 'X', '↓', '↓', 'X', 'X', 'X', '↑', 'X', 'X', '↓', 'X', ' ', ' ', ' ', ' ', ' ' },
        { ' ', ' ', ' ', ' ', ' ', 'X', '↑', 'X', 'X', '↑', '←', '←', '←', '←', '→', '→', '→', '→', '↑', 'X', 'X', '↓', 'X', ' ', ' ', ' ', ' ', ' ' },
        { ' ', ' ', ' ', ' ', ' ', 'X', '↑', 'X', 'X', 'X', 'X', 'X', '↓', 'X', 'X', '↓', 'X', 'X', 'X', 'X', 'X', '↓', 'X', ' ', ' ', ' ', ' ', ' ' },
        { 'X', 'X', 'X', 'X', 'X', 'X', '↑', 'X', 'X', 'X', 'X', 'X', '↓', 'X', 'X', '↓', 'X', 'X', 'X', 'X', 'X', '↓', 'X', 'X', 'X', 'X', 'X', 'X' },
        { 'X', '→', '→', '→', '→', '→', '↑', 'X', 'X', '↓', '←', '←', '←', 'X', 'X', '→', '→', '→', '↓', 'X', 'X', '→', '→', '→', '→', '→', '↓', 'X' },
        { 'X', '↑', 'X', 'X', 'X', 'X', '↑', 'X', 'X', '↓', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', '↓', 'X', 'X', '↑', 'X', 'X', 'X', 'X', '↓', 'X' },
        { 'X', '↑', 'X', 'X', 'X', 'X', '↑', 'X', 'X', '↓', 'X', 'X', 'x', 'X', 'X', 'X', 'X', 'X', '↓', 'X', 'X', '↑', 'X', 'X', 'X', 'X', '↓', 'X' },
        { 'X', '↑', '←', '←', '←', '←', '←', '←', '←', '→', '→', '→', '↓', '←', '←', '←', '←', '←', '←', '→', '→', '→', '→', '→', '→', '→', '↓', 'X' },
        { 'X', '↑', 'X', 'X', 'X', 'X', '↓', 'X', 'X', 'X', 'X', 'X', '↓', 'X', 'X', '↑', 'X', 'X', 'X', 'X', 'X', '↓', 'X', 'X', 'X', 'X', '↓', 'X' },
        { 'X', '↑', 'X', 'X', 'X', 'X', '↓', 'X', 'X', 'X', 'X', 'X', '↓', 'X', 'X', '↑', 'X', 'X', 'X', 'X', 'X', '↓', 'X', 'X', 'X', 'X', '↓', 'X' },
        { 'X', '↑', 'X', 'X', 'X', 'X', '↓', 'X', 'X', 'X', 'X', 'X', '↓', 'X', 'X', '↑', 'X', 'X', 'X', 'X', 'X', '↓', 'X', 'X', 'X', 'X', '↓', 'X' },
        { 'X', '↑', '←', '←', '←', '←', '←', '←', '←', '←', '←', '←', '←', 'X', 'X', '↑', '←', '←', '←', '←', '←', '←', '←', '←', '←', '←', '←', 'X' },
        { 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X', 'X' },
    };
    public readonly LevelManager.Direction[,] movementMap;

    public Ghost4MovementGrid()
    {
        var n = _rawMovementMapNew.GetLength(0);
        var m = _rawMovementMapNew.GetLength(1);
        movementMap = new LevelManager.Direction[n, m];
        for (var i = 0; i < _rawMovementMapNew.GetLength(0); i++)
        {
            for (var j = 0; j < _rawMovementMapNew.GetLength(1); j++)
            {
                movementMap[i, j] = ToDirection(_rawMovementMapNew[i, j]);
            }
        }
    }

    private LevelManager.Direction ToDirection(char rawDirection)
    {
        switch (rawDirection)
        {
           case '→':
               return LevelManager.Direction.Right;
            case '←':
                return LevelManager.Direction.Left;
            case '↑':
                return LevelManager.Direction.Up;
            case '↓':
                return LevelManager.Direction.Down;
            default:
                return LevelManager.Direction.None;
        }
    }
}
